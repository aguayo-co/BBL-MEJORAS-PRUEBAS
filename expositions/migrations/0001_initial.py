# Generated by Django 2.2.9 on 2019-12-27 20:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import resources.validators
import wagtail.fields
import wagtail.embeds.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('harvester', '0016_auto_20191227_1102'),
        ('wagtailimages', '0001_squashed_0021'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cloud',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('group_by', models.CharField(choices=[('subject', 'Tema'), ('type', 'Tipo de contenido'), ('author', 'Autor'), ('data_source', 'Fuente de datos'), ('date', 'Fecha de publicación'), ('format', 'Formato')], max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageGallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Redirection',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('redirect_url', models.URLField(help_text='La URL a la cual el usuario será redirigido. Ejemplo: https://www.example.com/ruta-al-documento', validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date_group_by', models.CharField(choices=[('Y', 'Year'), ('M', 'Month'), ('Y', 'Day')], max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoGallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('videos', wagtail.fields.StreamField([('video', wagtail.embeds.blocks.EmbedBlock(label='video', validators=[django.core.validators.URLValidator(message='Sólo se permiten videos de youtube.com.', regex='^http(?:s)?://(?:[-\\w]+\\.)?youtube\\.com/', schemes=['http', 'https'])]))])),
            ],
        ),
        migrations.CreateModel(
            name='TimelineEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('date', models.DateField()),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='harvester.ContentResource')),
                ('timeline', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='expositions.Timeline')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MapPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=8, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)])),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)])),
                ('map', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='expositions.Map')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='harvester.ContentResource')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GalleryImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('gallery', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='expositions.ImageGallery')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExpositionSection',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.fields.StreamField([('wysiwyg', wagtail.blocks.RichTextBlock(features=['h2', 'h3', 'bold', 'italic', 'ol', 'ul', 'hr', 'link', 'document-link', 'image', 'embed', 'superscript', 'subscript', 'blockquote'])), ('image_gallery', wagtail.snippets.blocks.SnippetChooserBlock('expositions.ImageGallery')), ('video_gallery', wagtail.snippets.blocks.SnippetChooserBlock('expositions.VideoGallery')), ('map', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Map')), ('cloud', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Cloud')), ('timeline', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Timeline'))])),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Exposition',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('description', wagtail.fields.RichTextField(validators=[resources.validators.HtmlMaxLengthValidator(300)])),
                ('content', wagtail.fields.StreamField([('wysiwyg', wagtail.blocks.RichTextBlock(features=['h2', 'h3', 'bold', 'italic', 'ol', 'ul', 'hr', 'link', 'document-link', 'image', 'embed', 'superscript', 'subscript', 'blockquote'])), ('image_gallery', wagtail.snippets.blocks.SnippetChooserBlock('expositions.ImageGallery')), ('video_gallery', wagtail.snippets.blocks.SnippetChooserBlock('expositions.VideoGallery')), ('map', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Map')), ('cloud', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Cloud')), ('timeline', wagtail.snippets.blocks.SnippetChooserBlock('expositions.Timeline'))], blank=True)),
                ('sub_title', models.CharField(blank=True, max_length=255)),
                ('intro', wagtail.fields.RichTextField(blank=True, validators=[resources.validators.HtmlMaxLengthValidator(150)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CloudItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('cloud', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='expositions.Cloud')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='harvester.ContentResource')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
