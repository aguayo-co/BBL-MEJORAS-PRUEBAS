# Generated by Django 2.2.4 on 2019-08-15 23:00

import custom_user.managers
from django.conf import settings
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import resources.validators


class Migration(migrations.Migration):

    replaces = [('custom_user', '0001_initial'), ('custom_user', '0002_profile'), ('custom_user', '0003_auto_20190607_2208'), ('custom_user', '0004_auto_20190619_1252'), ('custom_user', '0005_profile_accept_terms'), ('custom_user', '0006_auto_20190627_2052'), ('custom_user', '0007_auto_20190627_2326'), ('custom_user', '0008_auto_20190702_1326'), ('custom_user', '0009_auto_20190704_1428'), ('custom_user', '0010_auto_20190704_2014'), ('custom_user', '0011_auto_20190708_1735'), ('custom_user', '0012_user_country'), ('custom_user', '0013_auto_20190724_1838'), ('custom_user', '0014_auto_20190806_1409'), ('custom_user', '0015_auto_20190816_1527')]

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('mega_red', '0001_squashed_0003_auto_20190710_1321'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mega_red.Country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', custom_user.managers.UserManager(select_related=['profile', 'country'])),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='usuario')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatar', validators=[resources.validators.FileSizeValidator(1000000), django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])], verbose_name='imagen de perfil')),
                ('biography', models.TextField(max_length=800, verbose_name='biografía')),
                ('social_networks', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True), blank=True, null=True, size=4, verbose_name='redes sociales')),
                ('accept_terms', models.BooleanField(default=False, verbose_name='acepta términos y condiciones')),
            ],
        ),
    ]
