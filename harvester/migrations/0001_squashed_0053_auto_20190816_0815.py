# Generated by Django 2.2.4 on 2019-08-15 22:39

from django.conf import settings
from django.contrib.postgres.operations import TrigramExtension
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import hitcount.models
import resources.validators
import simple_history.models


def create_contentresource_search_indexes(apps, schema_editor):
    """Create Search indexes for ContentResource model."""
    contentresource_table = apps.get_model(
        "harvester", "ContentResource"
    )._meta.db_table
    for field in ["title", "creator"]:
        schema_editor.execute(
            f'CREATE INDEX "contentresource_{field}_1" ON "{contentresource_table}"'
            f' USING GIN (UPPER("{field}"[1]::text) gin_trgm_ops)'
        )


def drop_contentresource_search_indexes(apps, schema_editor):
    """Create Search indexes for ContentResource model."""
    for field in ["title", "creator"]:
        schema_editor.execute(f'DROP INDEX "contentresource_{field}_1"')


class Migration(migrations.Migration):

    replaces = [
        ("harvester", "0001_initial"),
        ("harvester", "0002_auto_20190529_1632"),
        ("harvester", "0003_auto_20190531_2030"),
        ("harvester", "0004_auto_20190617_2046"),
        ("harvester", "0005_auto_20190617_2047"),
        ("harvester", "0006_auto_20190619_1708"),
        ("harvester", "0007_auto_20190619_2134"),
        ("harvester", "0008_contentresourceequivalence_equivalence"),
        ("harvester", "0009_auto_20190625_1520"),
        ("harvester", "0010_auto_20190626_1610"),
        ("harvester", "0011_auto_20190626_2109"),
        ("harvester", "0012_auto_20190626_2237"),
        ("harvester", "0013_auto_20190627_2052"),
        ("harvester", "0014_promotedcontentresource"),
        ("harvester", "0015_auto_20190628_1931"),
        ("harvester", "0016_auto_20190628_2134"),
        ("harvester", "0017_auto_20190629_0542"),
        ("harvester", "0018_auto_20190629_1821"),
        ("harvester", "0019_auto_20190630_0258"),
        ("harvester", "0020_auto_20190702_1124"),
        ("harvester", "0021_equivalence_icon_class"),
        ("harvester", "0022_datasource_is_ally"),
        ("harvester", "0023_auto_20190703_1841"),
        ("harvester", "0024_auto_20190703_1858"),
        ("harvester", "0025_collectionandresource"),
        ("harvester", "0026_remove_collection_resources"),
        ("harvester", "0027_auto_20190704_2117"),
        ("harvester", "0028_auto_20190704_1839"),
        ("harvester", "0029_auto_20190705_1504"),
        ("harvester", "0030_auto_20190705_1715"),
        ("harvester", "0031_auto_20190708_1027"),
        ("harvester", "0032_auto_20190708_1756"),
        ("harvester", "0033_auto_20190709_1811"),
        ("harvester", "0034_auto_20190709_1925"),
        ("harvester", "0035_auto_20190709_2213"),
        ("harvester", "0036_remove_collaborativecollection_collaborators"),
        ("harvester", "0037_auto_20190715_1251"),
        ("harvester", "0038_auto_20190719_2352"),
        ("harvester", "0039_auto_20190722_2031"),
        ("harvester", "0040_auto_20190723_1306"),
        ("harvester", "0041_auto_20190724_1040"),
        ("harvester", "0042_contentresource_topographicnumber"),
        ("harvester", "0043_auto_20190729_1741"),
        ("harvester", "0044_auto_20190730_1659"),
        ("harvester", "0045_auto_20190803_1721"),
        ("harvester", "0046_auto_20190805_1443"),
        ("harvester", "0047_auto_20190805_1541"),
        ("harvester", "0048_auto_20190806_1409"),
        ("harvester", "0049_auto_20190813_0846"),
        ("harvester", "0050_auto_20190813_1029"),
        ("harvester", "0051_auto_20190814_1131"),
        ("harvester", "0052_auto_20190815_1628"),
        ("harvester", "0053_auto_20190816_0815"),
    ]

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]

    operations = [
        migrations.CreateModel(
            name="Collaborator",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (-1, "invitado"),
                            (-2, "solicitado"),
                            (1, "colaborando"),
                        ]
                    ),
                ),
            ],
            options={
                "verbose_name": "colaborador de la colección",
                "verbose_name_plural": "colaboradores de la colección",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=100, verbose_name="nombre para la colección"
                    ),
                ),
                (
                    "description",
                    resources.fields.WysiwygField(
                        max_length=200, verbose_name="descripción"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        max_length=2000,
                        null=True,
                        upload_to="collections/images/",
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="foto de portada",
                    ),
                ),
                ("public", models.BooleanField(verbose_name="Colección pública")),
                ("visible", models.BooleanField(default=True)),
                (
                    "home_site",
                    models.BooleanField(default=False, verbose_name="Home principal"),
                ),
                (
                    "home_internal",
                    models.BooleanField(default=False, verbose_name="Home interno"),
                ),
            ],
            options={
                "verbose_name": "colección",
                "verbose_name_plural": "colecciones",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CollectionAndResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "recurso en colección",
                "verbose_name_plural": "recursos en colecciones",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ContentResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "abstract",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "accessRights",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "accrualMethod",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "accrualPeriodicity",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "accrualPolicy",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "alternative",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "audience",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "available",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "bibliographicCitation",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "conformsTo",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "contributor",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "coverage",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "created",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "creator",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "date",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "dateAccepted",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "dateCopyrighted",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "dateSubmitted",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "description",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "digitalFormat",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "educationLevel",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "extent",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "format",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "hasFormat",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "hasPart",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "hasVersion",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("hashed_identifier", models.CharField(max_length=40)),
                (
                    "identifier",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), size=None
                    ),
                ),
                (
                    "instructionalMethod",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isFormatOf",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isPartOf",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isReferencedBy",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isReplacedBy",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isRequiredBy",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "issued",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "isVersionOf",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "license",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "mediator",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "medium",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "modified",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "provenance",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "publisher",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "references",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "relation",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "replaces",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "requires",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "rightsHolder",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "source",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "spatial",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "tableOfContents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "temporal",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "title",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "topographicNumber",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "valid",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("visible", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "recurso de contenido",
                "verbose_name_plural": "recursos de contenido",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
            bases=(models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name="ContentResourceEquivalence",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "original_value",
                    models.CharField(max_length=2000, verbose_name="valor original"),
                ),
                (
                    "field",
                    models.CharField(
                        choices=[
                            ("type", "tipo de contenido"),
                            ("language", "idioma"),
                            ("rights", "derechos"),
                            ("subject", "tema"),
                        ],
                        max_length=255,
                        verbose_name="campo",
                    ),
                ),
            ],
            options={
                "verbose_name": "equivalencia de recurso de contenido",
                "verbose_name_plural": "equivalencias de recurso de contenido",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="nombre"
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        upload_to="datasources/logos/",
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="logo",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        upload_to="datasources/images/",
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="imagen",
                    ),
                ),
                (
                    "config",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        default=dict, verbose_name="configuración"
                    ),
                ),
                (
                    "data_mapping",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, null=True, verbose_name="mapeo de datos"
                    ),
                ),
                (
                    "relevance",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="relevancia",
                    ),
                ),
                (
                    "exclusive",
                    models.BooleanField(default=False, verbose_name="Exclusivo"),
                ),
                (
                    "online_resources",
                    models.BooleanField(default=False, verbose_name="acceso digital"),
                ),
                (
                    "parking",
                    models.BooleanField(default=False, verbose_name="parqueadero"),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, max_length=2000, verbose_name="dirección"
                    ),
                ),
                (
                    "contact",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="contacto"
                    ),
                ),
                ("is_ally", models.BooleanField(default=False, verbose_name="aliado")),
            ],
            options={
                "verbose_name": "fuente de datos",
                "verbose_name_plural": "fuentes de datos",
                "ordering": ["-updated_at"],
                "permissions": [
                    ("can_harvest", "Puede cosechar"),
                    (
                        "can_reindex_datasource",
                        "Puede marcar todos los recursos de esta fuente de datos para reindexar",
                    ),
                ],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Equivalence",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="nombre")),
                (
                    "field",
                    models.CharField(
                        choices=[
                            ("type", "tipo de contenido"),
                            ("language", "idioma"),
                            ("rights", "derechos"),
                            ("subject", "tema"),
                        ],
                        max_length=255,
                        verbose_name="campo",
                    ),
                ),
                (
                    "icon_class",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("3d", "3d"),
                            ("article", "artículo"),
                            ("audio", "audio"),
                            ("book", "libro"),
                            ("brochure", "programa de mano (folleto)"),
                            ("bulletin", "boletin"),
                            ("data", "dato"),
                            ("guide", "guía de estudio"),
                            ("interactive", "interactivo"),
                            ("map", "mapa"),
                            ("music-sheet", "partitura"),
                            ("newspaper", "prensa"),
                            ("objects", "objeto físico"),
                            ("picture", "imágen"),
                            ("series", "serie monográfica"),
                            ("software", "software"),
                            ("texts", "texto"),
                            ("thesis", "tesis"),
                            ("video", "video"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="clase de íconos",
                    ),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="prioridad",
                    ),
                ),
            ],
            options={
                "verbose_name": "equivalencia",
                "verbose_name_plural": "equivalencias",
                "ordering": ["priority", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Set",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="nombre")),
                (
                    "spec",
                    models.CharField(max_length=255, verbose_name="especificación"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        upload_to="sets/images/",
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="foto de portada",
                    ),
                ),
                ("description", resources.fields.WysiwygField(blank=True, default="")),
                ("visible", models.BooleanField(default=True)),
                (
                    "home_site",
                    models.BooleanField(default=False, verbose_name="Home principal"),
                ),
                (
                    "home_internal",
                    models.BooleanField(default=False, verbose_name="Home interno"),
                ),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.DataSource",
                    ),
                ),
            ],
            options={"ordering": ["-updated_at"], "abstract": False},
        ),
        migrations.CreateModel(
            name="CollaborativeCollection",
            fields=[
                (
                    "collection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="harvester.Collection",
                    ),
                )
            ],
            options={
                "verbose_name": "colección colaborativa",
                "verbose_name_plural": "colecciones colaborativas",
            },
            bases=("harvester.collection",),
        ),
        migrations.CreateModel(
            name="Exhibition",
            fields=[
                (
                    "collection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="harvester.Collection",
                    ),
                ),
                (
                    "review_title",
                    models.CharField(max_length=100, verbose_name="título"),
                ),
                (
                    "review",
                    resources.fields.WysiwygField(
                        max_length=1800, verbose_name="reseña"
                    ),
                ),
            ],
            options={
                "verbose_name": "exposición",
                "verbose_name_plural": "exposiciones",
            },
            bases=("harvester.collection",),
        ),
        migrations.CreateModel(
            name="GroupHash",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "resource",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="harvester.ContentResource",
                        verbose_name="recurso de contenido",
                    ),
                ),
                ("hash", models.TextField(verbose_name="Hash de Agrupamiento")),
            ],
            options={"ordering": ["-updated_at"], "abstract": False},
        ),
        migrations.CreateModel(
            name="PromotedContentResource",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "resource",
                    models.OneToOneField(
                        limit_choices_to={"sets__visible": True, "visible": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        max_length=2000,
                        upload_to="promoted_contentresources/images/",
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="imagen",
                    ),
                ),
            ],
            options={"ordering": ["priority", "-updated_at"], "abstract": False},
        ),
        migrations.CreateModel(
            name="TypeEquivalenceRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.SmallIntegerField()),
                (
                    "contentresource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "contentresourceequivalence",
                    models.ForeignKey(
                        limit_choices_to={"field": "type"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResourceEquivalence",
                    ),
                ),
            ],
            options={"ordering": ["position"], "abstract": False},
        ),
        migrations.CreateModel(
            name="SubjectEquivalenceRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.SmallIntegerField()),
                (
                    "contentresource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "contentresourceequivalence",
                    models.ForeignKey(
                        limit_choices_to={"field": "subject"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResourceEquivalence",
                    ),
                ),
            ],
            options={"ordering": ["position"], "abstract": False},
        ),
        migrations.CreateModel(
            name="SetAndResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("harvest_task", models.CharField(max_length=200)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="harvester.Set"
                    ),
                ),
            ],
            options={"ordering": ["-updated_at"], "abstract": False},
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "day",
                    models.IntegerField(
                        choices=[
                            (1, "lunes"),
                            (2, "martes"),
                            (3, "miércoles"),
                            (4, "jueves"),
                            (5, "viernes"),
                            (6, "sábados"),
                            (7, "domingos"),
                            (8, "festivos"),
                            (9, "domingos y festivos"),
                        ],
                        verbose_name="día",
                    ),
                ),
                (
                    "opening",
                    models.TimeField(
                        blank=True, null=True, verbose_name="hora de apertura"
                    ),
                ),
                (
                    "closing",
                    models.TimeField(
                        blank=True, null=True, verbose_name="hora de cierre"
                    ),
                ),
                ("closed", models.BooleanField(default=False, verbose_name="cerrado")),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.DataSource",
                        verbose_name="fuente de datos",
                    ),
                ),
            ],
            options={
                "verbose_name": "horario",
                "verbose_name_plural": "horarios",
                "ordering": ["day", "-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RightsEquivalenceRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.SmallIntegerField()),
                (
                    "contentresource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "contentresourceequivalence",
                    models.ForeignKey(
                        limit_choices_to={"field": "rights"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResourceEquivalence",
                    ),
                ),
            ],
            options={"ordering": ["position"], "abstract": False},
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "text",
                    models.TextField(
                        max_length=480,
                        validators=[django.core.validators.MinLengthValidator(100)],
                        verbose_name="reseña",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
            ],
            options={
                "verbose_name": "reseña",
                "verbose_name_plural": "reseñas",
                "ordering": ["-updated_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LanguageEquivalenceRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.SmallIntegerField()),
                (
                    "contentresource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
                (
                    "contentresourceequivalence",
                    models.ForeignKey(
                        limit_choices_to={"field": "language"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResourceEquivalence",
                    ),
                ),
            ],
            options={"ordering": ["position"], "abstract": False},
        ),
        migrations.CreateModel(
            name="HistoricalExhibition",
            fields=[
                (
                    "collection_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="harvester.Collection",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="updated at"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=100, verbose_name="nombre para la colección"
                    ),
                ),
                (
                    "description",
                    resources.fields.WysiwygField(
                        max_length=200, verbose_name="descripción"
                    ),
                ),
                (
                    "image",
                    models.TextField(
                        max_length=2000,
                        null=True,
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="foto de portada",
                    ),
                ),
                ("public", models.BooleanField(verbose_name="Colección pública")),
                ("visible", models.BooleanField(default=True)),
                (
                    "home_site",
                    models.BooleanField(default=False, verbose_name="Home principal"),
                ),
                (
                    "home_internal",
                    models.BooleanField(default=False, verbose_name="Home interno"),
                ),
                (
                    "review_title",
                    models.CharField(max_length=100, verbose_name="título"),
                ),
                (
                    "review",
                    resources.fields.WysiwygField(
                        max_length=1800, verbose_name="reseña"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical exposición",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCollection",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="updated at"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=100, verbose_name="nombre para la colección"
                    ),
                ),
                (
                    "description",
                    resources.fields.WysiwygField(
                        max_length=200, verbose_name="descripción"
                    ),
                ),
                (
                    "image",
                    models.TextField(
                        max_length=2000,
                        null=True,
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="foto de portada",
                    ),
                ),
                ("public", models.BooleanField(verbose_name="Colección pública")),
                ("visible", models.BooleanField(default=True)),
                (
                    "home_site",
                    models.BooleanField(default=False, verbose_name="Home principal"),
                ),
                (
                    "home_internal",
                    models.BooleanField(default=False, verbose_name="Home interno"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical colección",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCollaborativeCollection",
            fields=[
                (
                    "collection_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="harvester.Collection",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="updated at"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=100, verbose_name="nombre para la colección"
                    ),
                ),
                (
                    "description",
                    resources.fields.WysiwygField(
                        max_length=200, verbose_name="descripción"
                    ),
                ),
                (
                    "image",
                    models.TextField(
                        max_length=2000,
                        null=True,
                        validators=[
                            resources.validators.FileSizeValidator(1000000),
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png"]
                            ),
                        ],
                        verbose_name="foto de portada",
                    ),
                ),
                ("public", models.BooleanField(verbose_name="Colección pública")),
                ("visible", models.BooleanField(default=True)),
                (
                    "home_site",
                    models.BooleanField(default=False, verbose_name="Home principal"),
                ),
                (
                    "home_internal",
                    models.BooleanField(default=False, verbose_name="Home interno"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical colección colaborativa",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ExhibitionFeaturedContentResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "description",
                    models.TextField(max_length=800, verbose_name="descripción"),
                ),
                (
                    "position",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="posición",
                    ),
                ),
                (
                    "contentresource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.ContentResource",
                    ),
                ),
            ],
            options={
                "verbose_name": "recurso destacado de la Exhibición",
                "verbose_name_plural": "recursos destacados de la Exhibición",
                "ordering": ["position", "-updated_at"],
            },
        ),
        migrations.AddIndex(
            model_name="equivalence",
            index=models.Index(
                fields=["updated_at"], name="harvester_e_updated_e67dd4_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="equivalence",
            constraint=models.UniqueConstraint(
                fields=("name", "field"), name="unique_equivalence"
            ),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(
                fields=["updated_at"], name="harvester_d_updated_4352b4_idx"
            ),
        ),
        migrations.AddField(
            model_name="contentresourceequivalence",
            name="equivalence",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="harvester.Equivalence",
                verbose_name="equivalencia",
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="data_source",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="harvester.DataSource",
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="language",
            field=models.ManyToManyField(
                blank=True,
                related_name="language_resources",
                through="harvester.LanguageEquivalenceRelation",
                to="harvester.ContentResourceEquivalence",
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="rights",
            field=models.ManyToManyField(
                blank=True,
                related_name="rights_resources",
                through="harvester.RightsEquivalenceRelation",
                to="harvester.ContentResourceEquivalence",
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="sets",
            field=models.ManyToManyField(
                through="harvester.SetAndResource", to="harvester.Set"
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="subject",
            field=models.ManyToManyField(
                blank=True,
                related_name="subject_resources",
                through="harvester.SubjectEquivalenceRelation",
                to="harvester.ContentResourceEquivalence",
            ),
        ),
        migrations.AddField(
            model_name="contentresource",
            name="type",
            field=models.ManyToManyField(
                blank=True,
                related_name="type_resources",
                through="harvester.TypeEquivalenceRelation",
                to="harvester.ContentResourceEquivalence",
            ),
        ),
        migrations.AddField(
            model_name="collectionandresource",
            name="collection",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="harvester.Collection"
            ),
        ),
        migrations.AddField(
            model_name="collectionandresource",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="harvester.ContentResource",
            ),
        ),
        migrations.AddField(
            model_name="collection",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="collection",
            name="resources",
            field=models.ManyToManyField(
                blank=True,
                through="harvester.CollectionAndResource",
                to="harvester.ContentResource",
            ),
        ),
        migrations.AddField(
            model_name="collaborator",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterUniqueTogether(
            name="typeequivalencerelation",
            unique_together={("contentresource", "position")},
        ),
        migrations.AlterUniqueTogether(
            name="subjectequivalencerelation",
            unique_together={("contentresource", "position")},
        ),
        migrations.AddIndex(
            model_name="setandresource",
            index=models.Index(
                fields=["updated_at"], name="harvester_s_updated_46ccb8_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="setandresource",
            constraint=models.UniqueConstraint(
                fields=("resource", "set"), name="unique_resource_per_set"
            ),
        ),
        migrations.AddIndex(
            model_name="set",
            index=models.Index(
                fields=["updated_at"], name="harvester_s_updated_351cd4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="set",
            index=models.Index(
                fields=["visible"], name="harvester_s_visible_a23cf8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(
                fields=["updated_at"], name="harvester_s_updated_90901f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="schedule",
            constraint=models.UniqueConstraint(
                fields=("data_source", "day"), name="unique_day_per_schedule"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rightsequivalencerelation",
            unique_together={("contentresource", "position")},
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["updated_at"], name="harvester_r_updated_abadc2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="promotedcontentresource",
            index=models.Index(
                fields=["updated_at"], name="harvester_p_updated_e6ea9b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="languageequivalencerelation",
            unique_together={("contentresource", "position")},
        ),
        migrations.AddIndex(
            model_name="grouphash",
            index=models.Index(
                fields=["updated_at"], name="harvester_g_updated_edabd3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouphash",
            index=models.Index(fields=["hash"], name="harvester_g_hash_bfff75_idx"),
        ),
        migrations.AddField(
            model_name="exhibitionfeaturedcontentresource",
            name="exhibition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="harvester.Exhibition"
            ),
        ),
        migrations.AddField(
            model_name="exhibition",
            name="featured_resources",
            field=models.ManyToManyField(
                blank=True,
                related_name="featuredinexhibition_set",
                through="harvester.ExhibitionFeaturedContentResource",
                to="harvester.ContentResource",
            ),
        ),
        migrations.AddField(
            model_name="exhibition",
            name="subject",
            field=models.ManyToManyField(
                limit_choices_to={"field": "subject"}, to="harvester.Equivalence"
            ),
        ),
        migrations.AddIndex(
            model_name="contentresourceequivalence",
            index=models.Index(
                fields=["updated_at"], name="harvester_c_updated_0802ee_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="contentresourceequivalence",
            constraint=models.UniqueConstraint(
                fields=("original_value", "field"), name="unique_mapping"
            ),
        ),
        migrations.AddIndex(
            model_name="contentresource",
            index=models.Index(
                fields=["updated_at"], name="harvester_c_updated_609f11_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentresource",
            index=models.Index(
                fields=["visible"], name="harvester_c_visible_1fef25_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="contentresource",
            constraint=models.UniqueConstraint(
                fields=("hashed_identifier", "data_source"),
                name="unique_resource_per_source",
            ),
        ),
        migrations.AddIndex(
            model_name="collectionandresource",
            index=models.Index(
                fields=["updated_at"], name="harvester_c_updated_70031c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collection",
            index=models.Index(
                fields=["updated_at"], name="harvester_c_updated_711fee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collection",
            index=models.Index(
                fields=["visible"], name="harvester_c_visible_e638a3_idx"
            ),
        ),
        migrations.AddField(
            model_name="collaborator",
            name="collaborativecollection",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="harvester.CollaborativeCollection",
            ),
        ),
        migrations.AddField(
            model_name="collaborativecollection",
            name="collaborators",
            field=models.ManyToManyField(
                blank=True,
                through="harvester.Collaborator",
                to=settings.AUTH_USER_MODEL,
                verbose_name="colaboradores",
            ),
        ),
        migrations.AddConstraint(
            model_name="exhibitionfeaturedcontentresource",
            constraint=models.UniqueConstraint(
                fields=("id", "position"), name="unique_position_per_exhibition"
            ),
        ),
        migrations.AddIndex(
            model_name="collaborator",
            index=models.Index(
                fields=["updated_at"], name="harvester_c_updated_7df7f7_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="collaborator",
            constraint=models.UniqueConstraint(
                fields=("collaborativecollection", "user"), name="unique_collaborator"
            ),
        ),
        TrigramExtension(),
        migrations.RunPython(
            code=create_contentresource_search_indexes,
            reverse_code=drop_contentresource_search_indexes,
        ),
    ]
